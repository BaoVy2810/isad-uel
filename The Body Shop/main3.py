import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Function to safely read Excel sheets
def safe_read_excel(file_path, sheet_name=None):
    try:
        if sheet_name:
            return pd.read_excel(file_path, sheet_name=sheet_name)
        else:
            return pd.read_excel(file_path)
    except ValueError as e:
        print(f"‚ö†Ô∏è Warning: {e}")
        return None
    except FileNotFoundError as e:
        print(f"‚ùå Error: File not found - {file_path}")
        return None


# Function to list available sheets in Excel file
def list_excel_sheets(file_path):
    try:
        xl_file = pd.ExcelFile(file_path)
        return xl_file.sheet_names
    except Exception as e:
        print(f"‚ùå Error reading {file_path}: {e}")
        return []


# ƒê·ªçc c√°c file d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói
print("üìä ƒêang ƒë·ªçc d·ªØ li·ªáu...")

karma = safe_read_excel('[FANPAGE KARMA] The Body Shop.xlsx', sheet_name='Metrics Overview')
apify = safe_read_excel('[APIFY] The Body Shop.xlsx')

# Check available sheets in FASTMOSS file
print("\nüîç Ki·ªÉm tra c√°c sheet c√≥ s·∫µn trong file FASTMOSS:")
fastmoss_sheets = list_excel_sheets('[FASTMOSS] The Body Shop.xlsx')
print(f"Available sheets: {fastmoss_sheets}")

fastmoss_video = safe_read_excel('[FASTMOSS] The Body Shop.xlsx', sheet_name='Data Video')
fastmoss_live = safe_read_excel('[FASTMOSS] The Body Shop.xlsx', sheet_name='Data Livestream')

# Try to read product data with different possible sheet names
fastmoss_product = None
possible_product_sheets = ['Data Product ', 'Data Product', 'Product', 'Products', 'S·∫£n ph·∫©m', 'Data S·∫£n ph·∫©m']

for sheet_name in possible_product_sheets:
    if sheet_name in fastmoss_sheets:
        fastmoss_product = safe_read_excel('[FASTMOSS] The Body Shop.xlsx', sheet_name=sheet_name)
        print(f"‚úÖ Found product data in sheet: {sheet_name}")
        break

if fastmoss_product is None:
    print("‚ö†Ô∏è Warning: Product data sheet not found. Continuing without product analysis.")

# ===== CHU·∫®N H√ìA D·ªÆ LI·ªÜU =====
print("\nüîß ƒêang chu·∫©n h√≥a d·ªØ li·ªáu...")


# Function to safely convert datetime columns
def safe_datetime_convert(df, column_name, unit=None):
    if df is not None and column_name in df.columns:
        try:
            if unit:
                df[column_name] = pd.to_datetime(df[column_name], unit=unit)
            else:
                df[column_name] = pd.to_datetime(df[column_name])
            print(f"‚úÖ Converted {column_name} to datetime")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not convert {column_name} to datetime: {e}")
    else:
        if df is not None:
            print(f"‚ö†Ô∏è Warning: Column '{column_name}' not found. Available columns: {df.columns.tolist()}")


# Chuy·ªÉn ki·ªÉu ng√†y th√°ng (ch·ªâ n·∫øu d·ªØ li·ªáu t·ªìn t·∫°i)
# ‚úÖ Ki·ªÉm tra Karma sheet n·∫øu to√†n c·ªôt Unnamed
if karma is not None:
    print(f"Karma columns: {karma.columns.tolist()}")
    if all(col.startswith('Unnamed') for col in karma.columns):
        print("‚ö†Ô∏è Warning: All columns in Karma are unnamed. Trying with header=1...")
        try:
            karma = pd.read_excel('[FANPAGE KARMA] The Body Shop.xlsx', sheet_name='Metrics Overview', header=1)
            print(f"‚úÖ New Karma columns: {karma.columns.tolist()}")
        except Exception as e:
            print(f"‚ùå Failed to re-read Karma with header=1: {e}")

    # Try common date column names
    date_columns = ['Date', 'date', 'Ng√†y', 'Time', 'Timestamp']
    for col in date_columns:
        if col in karma.columns:
            safe_datetime_convert(karma, col)
            break

if apify is not None:
    safe_datetime_convert(apify, 'createTime', unit='s')

# ‚úÖ ƒê·ªïi t√™n c·ªôt ƒë√∫ng cho ng√†y ƒëƒÉng
if fastmoss_video is not None:
    safe_datetime_convert(fastmoss_video, 'Th·ªùi gian ph√°t h√†nh')  # S·ª≠a t·ª´ 'Ng√†y ƒëƒÉng'

if fastmoss_live is not None:
    safe_datetime_convert(fastmoss_live, 'Th·ªùi gian b·∫Øt ƒë·∫ßu Livestream')  # S·ª≠a t·ª´ 'Ng√†y'


# L√†m s·∫°ch ƒë∆°n v·ªã ti·ªÅn t·ªá (VND)
def clean_currency(value):
    try:
        if pd.isna(value):
            return None
        if isinstance(value, str):
            value = value.replace("‚Ç´", "").replace(".", "").replace(",", ".").replace(" ", "").lower()
            if "tr" in value:
                return float(value.replace("tr", "")) * 1_000_000
            elif "k" in value:
                return float(value.replace("k", "")) * 1_000
            else:
                return float(value)
        return float(value)
    except:
        return None


# √Åp d·ª•ng v√†o c·ªôt doanh s·ªë (ch·ªâ n·∫øu d·ªØ li·ªáu t·ªìn t·∫°i)
if fastmoss_video is not None and 'Doanh s·ªë b√°n h√†ng c·ªßa video' in fastmoss_video.columns:
    fastmoss_video['Doanh s·ªë (VND)'] = fastmoss_video['Doanh s·ªë b√°n h√†ng c·ªßa video'].apply(clean_currency)

if fastmoss_live is not None and 'Doanh s·ªë Livestream' in fastmoss_live.columns:
    fastmoss_live['Doanh s·ªë (VND)'] = fastmoss_live['Doanh s·ªë Livestream'].apply(clean_currency)

if fastmoss_product is not None and 'Doanh s·ªë' in fastmoss_product.columns:
    fastmoss_product['Doanh s·ªë (VND)'] = fastmoss_product['Doanh s·ªë'].apply(clean_currency)

# ===== 1Ô∏è‚É£ PH√ÇN T√çCH T∆Ø∆†NG T√ÅC TR√äN FACEBOOK (KARMA) =====
if karma is not None:
    print("\nüìà ƒêang t·∫°o bi·ªÉu ƒë·ªì Facebook engagement...")

    # Find the date column and engagement column
    date_col = None
    engagement_col = None

    # Look for date column
    for col in karma.columns:
        if any(keyword in col.lower() for keyword in ['date', 'ng√†y', 'time']):
            date_col = col
            break

    # Look for engagement column
    for col in karma.columns:
        if any(keyword in col.lower() for keyword in ['engagement', 't∆∞∆°ng t√°c', 'interact']):
            engagement_col = col
            break

    if date_col and engagement_col:
        plt.figure(figsize=(10, 5))
        sns.lineplot(data=karma, x=date_col, y=engagement_col)
        plt.title("T∆∞∆°ng t√°c t·ªïng th·ªÉ theo ng√†y (Facebook)")
        plt.xlabel("Ng√†y")
        plt.ylabel("Engagement")
        plt.grid(True)
        plt.tight_layout()
        plt.show()
    else:
        print(f"‚ö†Ô∏è Could not find date or engagement columns. Available columns: {karma.columns.tolist()}")
else:
    print("‚ö†Ô∏è B·ªè qua ph√¢n t√≠ch Facebook - d·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng")

# ===== 2Ô∏è‚É£ PH√ÇN T√çCH TOP VIDEO TIKTOK (APIFY) =====
# ‚úÖ Ph√¢n t√≠ch TikTok videos
if apify is not None:
    print("üé• Ph√¢n t√≠ch TikTok videos...")
    # S·∫Øp x·∫øp video theo l∆∞·ª£t xem gi·∫£m d·∫ßn
    if 'playCount' in apify.columns:
        top_tiktok = apify.sort_values(by='playCount', ascending=False).head(10)
        print("üî• Top 10 video TikTok nhi·ªÅu l∆∞·ª£t xem nh·∫•t:")
        # ‚úÖ Ki·ªÉm tra c√°c c·ªôt c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi in
        expected_columns = ['desc', 'playCount', 'diggCount', 'shareCount']
        available_columns = [col for col in expected_columns if col in top_tiktok.columns]
        if available_columns:
            print(top_tiktok[available_columns])
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√°c c·ªôt mong ƒë·ª£i trong Apify: {expected_columns}")
            print(f"üìã C·ªôt hi·ªán c√≥: {apify.columns.tolist()}")
    else:
        print("‚ö†Ô∏è Kh√¥ng c√≥ c·ªôt 'playCount' trong d·ªØ li·ªáu TikTok.")

    # T√≠nh t∆∞∆°ng t√°c trung b√¨nh theo tu·∫ßn TikTok
    if 'createTime' in apify.columns:
        apify['week'] = apify['createTime'].dt.to_period("W").astype(str)

        # ‚úÖ Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt cho groupby
        groupby_columns = ['playCount', 'diggCount', 'shareCount', 'commentCount']
        available_groupby_columns = {col: 'sum' for col in groupby_columns if col in apify.columns}

        if available_groupby_columns:
            apify_grouped = apify.groupby('week').agg(available_groupby_columns).reset_index()

            # T√≠nh t·ªâ l·ªá t∆∞∆°ng t√°c n·∫øu c√≥ ƒë·ªß c·ªôt
            if 'playCount' in apify_grouped.columns and 'diggCount' in apify_grouped.columns:
                apify_grouped["T·ªâ l·ªá t∆∞∆°ng t√°c (%)"] = (apify_grouped["diggCount"] / apify_grouped["playCount"]) * 100

                # T√≠nh t·ªâ l·ªá t∆∞∆°ng t√°c t·ªïng
                interaction_cols = ['diggCount', 'shareCount', 'commentCount']
                available_interaction_cols = [col for col in interaction_cols if col in apify_grouped.columns]
                if available_interaction_cols:
                    total_interactions = apify_grouped[available_interaction_cols].sum(axis=1)
                    apify_grouped["T·ªâ l·ªá t∆∞∆°ng t√°c t·ªïng (%)"] = (total_interactions / apify_grouped["playCount"]) * 100
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh t∆∞∆°ng t√°c: {groupby_columns}")
            apify_grouped = None
    else:
        print("‚ö†Ô∏è Kh√¥ng c√≥ c·ªôt 'createTime' ƒë·ªÉ ph√¢n t√≠ch theo tu·∫ßn")
        apify_grouped = None
else:
    print("‚ö†Ô∏è B·ªè qua ph√¢n t√≠ch TikTok - d·ªØ li·ªáu kh√¥ng kh·∫£ d·ª•ng")
    apify_grouped = None

# ===== 3Ô∏è‚É£ SO S√ÅNH VIDEO vs LIVESTREAM (FASTMOSS) =====
if fastmoss_video is not None and fastmoss_live is not None:
    print("\nüìä So s√°nh Video vs Livestream...")

    # ‚úÖ T√¨m c·ªôt ng√†y ph√π h·ª£p
    video_date_col = None
    live_date_col = None

    # T√¨m c·ªôt ng√†y cho video
    for col in ['Th·ªùi gian ph√°t h√†nh', 'Ng√†y ƒëƒÉng', 'Date']:
        if col in fastmoss_video.columns:
            video_date_col = col
            break

    # T√¨m c·ªôt ng√†y cho livestream
    for col in ['Th·ªùi gian b·∫Øt ƒë·∫ßu Livestream', 'Ng√†y', 'Date']:
        if col in fastmoss_live.columns:
            live_date_col = col
            break

    # Ki·ªÉm tra c·ªôt l∆∞·ª£t xem
    video_view_col = 'L∆∞·ª£t xem' if 'L∆∞·ª£t xem' in fastmoss_video.columns else None
    live_view_col = 'L∆∞·ª£t xem' if 'L∆∞·ª£t xem' in fastmoss_live.columns else None

    if video_date_col and live_date_col and video_view_col and live_view_col:
        video_by_date = fastmoss_video.groupby(video_date_col)[video_view_col].sum()
        live_by_date = fastmoss_live.groupby(live_date_col)[live_view_col].sum()

        plt.figure(figsize=(10, 5))
        video_by_date.plot(label='Video th∆∞·ªùng', marker='o')
        live_by_date.plot(label='Livestream', marker='x')
        plt.legend()
        plt.title('So s√°nh l∆∞·ª£t xem Video th∆∞·ªùng v√† Livestream theo ng√†y')
        plt.ylabel('L∆∞·ª£t xem')
        plt.xlabel('Ng√†y')
        plt.grid(True)
        plt.tight_layout()
        plt.show()
    else:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt:")
        print(f"Video - Date: {video_date_col}, Views: {video_view_col}")
        print(f"Live - Date: {live_date_col}, Views: {live_view_col}")
        print(f"Video columns: {fastmoss_video.columns.tolist()}")
        print(f"Live columns: {fastmoss_live.columns.tolist()}")
else:
    print("‚ö†Ô∏è B·ªè qua so s√°nh Video vs Livestream - d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß")

# ===== 4Ô∏è‚É£ XU·∫§T FILE EXCEL PH√ÇN T√çCH =====
print("\nüíæ ƒêang xu·∫•t file Excel...")

# Prepare data for export (only if available)
sheets_to_export = {}

if karma is not None:
    sheets_to_export["Facebook Karma"] = karma

if fastmoss_video is not None:
    video_summary = fastmoss_video.copy()

    # ‚úÖ T√¨m c·ªôt ng√†y ph√π h·ª£p
    video_date_col = None
    for col in ['Th·ªùi gian ph√°t h√†nh', 'Ng√†y ƒëƒÉng', 'Date']:
        if col in video_summary.columns:
            video_date_col = col
            break

    if video_date_col:
        video_summary["week"] = video_summary[video_date_col].dt.to_period("W").astype(str)

        # ‚úÖ Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        agg_dict = {}
        if 'L∆∞·ª£t xem' in video_summary.columns:
            agg_dict['L∆∞·ª£t xem'] = 'sum'
        if 'S·ªë l∆∞·ª£ng likes' in video_summary.columns:
            agg_dict['S·ªë l∆∞·ª£ng likes'] = 'sum'
        if 'Doanh s·ªë (VND)' in video_summary.columns:
            agg_dict['Doanh s·ªë (VND)'] = 'sum'

        if agg_dict:
            video_grouped = video_summary.groupby("week").agg(agg_dict).reset_index()

            # T√≠nh t·ªâ l·ªá t∆∞∆°ng t√°c n·∫øu c√≥ ƒë·ªß c·ªôt
            if "S·ªë l∆∞·ª£ng likes" in video_grouped.columns and "L∆∞·ª£t xem" in video_grouped.columns:
                video_grouped["T·ªâ l·ªá t∆∞∆°ng t√°c (%)"] = (video_grouped["S·ªë l∆∞·ª£ng likes"] / video_grouped[
                    "L∆∞·ª£t xem"]) * 100

            sheets_to_export["FASTMOSS Video"] = video_grouped
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt d·ªØ li·ªáu c·∫ßn thi·∫øt cho video analysis")

if fastmoss_live is not None:
    live_summary = fastmoss_live.copy()

    # ‚úÖ T√¨m c·ªôt ng√†y ph√π h·ª£p
    live_date_col = None
    for col in ['Th·ªùi gian b·∫Øt ƒë·∫ßu Livestream', 'Ng√†y', 'Date']:
        if col in live_summary.columns:
            live_date_col = col
            break

    if live_date_col:
        live_summary["week"] = live_summary[live_date_col].dt.to_period("W").astype(str)

        # ‚úÖ Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        agg_dict = {}
        if 'L∆∞·ª£t xem' in live_summary.columns:
            agg_dict['L∆∞·ª£t xem'] = 'sum'
        if 'Doanh s·ªë (VND)' in live_summary.columns:
            agg_dict['Doanh s·ªë (VND)'] = 'sum'

        if agg_dict:
            live_grouped = live_summary.groupby("week").agg(agg_dict).reset_index()
            sheets_to_export["Livestream"] = live_grouped
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt d·ªØ li·ªáu c·∫ßn thi·∫øt cho livestream analysis")

if apify_grouped is not None:
    sheets_to_export["TikTok"] = apify_grouped

if fastmoss_product is not None:
    sheets_to_export["Product Data"] = fastmoss_product

# Export to Excel
if sheets_to_export:
    with pd.ExcelWriter("TheBodyShop_Insights.xlsx") as writer:
        for sheet_name, data in sheets_to_export.items():
            data.to_excel(writer, sheet_name=sheet_name, index=False)

    print("‚úÖ ƒê√£ xu·∫•t file Excel: TheBodyShop_Insights.xlsx")
    print(f"üìã C√°c sheet ƒë√£ xu·∫•t: {list(sheets_to_export.keys())}")
else:
    print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t")

print("\nüéâ Ho√†n th√†nh ph√¢n t√≠ch!")